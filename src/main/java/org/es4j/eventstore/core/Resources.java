package org.es4j.eventstore.core;

import org.es4j.dotnet.CultureInfo;
import org.es4j.dotnet.ResourceManager;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//   A strongly-typed resource class, for looking up localized strings, etc.
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
//[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
//[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
//[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
//internal
public class Resources {

    private static ResourceManager resourceMan;
    private static CultureInfo     resourceCulture;

    //[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    private Resources() {
    }

    //   Returns the cached ResourceManager instance used by this class.
    //[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    static ResourceManager getResourceManager() {
        /*
         * if (Object.ReferenceEquals(resourceMan, null)) { ResourceManager temp = new
         * ResourceManager("EventStore.Resources", typeof(Resources).Assembly); resourceMan = temp; }
         */
        return resourceMan;
    }

    //   Overrides the current thread's CurrentUICulture property for all
    //   resource lookups using this strongly typed resource class.
    //[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    static CultureInfo getCulture() {
        return resourceCulture;
    }

    static void setCulture(CultureInfo value) {
        resourceCulture = value;
    }

    // Adding commit '{0} with {1} events to stream '{2}'..
    public static String AddingCommitsToStream() {
        //return ResourceManager.getString("AddingCommitsToStream", resourceCulture);
        return "Adding commit '{0} with {1} events to stream '{2}'.";
    }

    // Adding a snapshot for stream '{0}' at revision '{1}'..
    public static String AddingSnapshot() {
        //return ResourceManager.getString("AddingSnapshot", resourceCulture);
        return "Adding a snapshot for stream '{0}' at revision '{1}'.";
    }

    // The object has already been disposed..
    public static String AlreadyDisposed() {
        //return ResourceManager.getString("AlreadyDisposed", resourceCulture);
        return "The object has already been disposed.";
    }

    // Appending uncommitted event to stream '{0}'.
    public static String AppendingUncommittedToStream() {
        //return ResourceManager.getString("AppendingUncommittedToStream", resourceCulture);
        return "Appending uncommitted event to stream '{0}'";
    }

    // Attempting to append commit '{0}' to stream '{1}' at position '{2}'.
    public static String AttemptingToCommit() {
        //return ResourceManager.getString("AttemptingToCommit", resourceCulture);
        return "Attempting to append commit '{0}' to stream '{1}' at position '{2}'.";
    }

    // Attempting to commit all changes on stream '{0}' to the underlying store..
    public static String AttemptingToCommitChanges() {
        //return ResourceManager.getString("AttemptingToCommitChanges", resourceCulture);
        return "";
    }

    // Building a commit attempt '{0}' on stream '{1}'..
    public static String BuildingCommitAttempt() {
        //return ResourceManager.getString("BuildingCommitAttempt", resourceCulture);
        return "Building a commit attempt '{0}' on stream '{1}'.";
    }

    // Clearing all uncommitted changes on stream '{0}'..
    public static String ClearingUncommittedChanges() {
        //return ResourceManager.getString("ClearingUncommittedChanges", resourceCulture);
        return "Clearing all uncommitted changes on stream '{0}'.";
    }

    // Commit attempt failed one or more integrity checks..
    public static String CommitAttemptFailedIntegrityChecks() {
        //return ResourceManager.getString("CommitAttemptFailedIntegrityChecks", resourceCulture);
        return "Commit attempt failed one or more integrity checks.";
    }

    // Pipeline hook of type '{0}' rejected attempt '{1}'..
    public static String CommitRejectedByPipelineHook() {
        //return ResourceManager.getString("CommitRejectedByPipelineHook", resourceCulture);
        return "Pipeline hook of type '{0}' rejected attempt '{1}'.";
    }

    // The commit must be uniquely identified..
    public static String CommitsMustBeUniquelyIdentified() {
        //return ResourceManager.getString("CommitsMustBeUniquelyIdentified", resourceCulture);
        return "The commit must be uniquely identified.";
    }

    // Committing attempt '{0}' which contains {1} events to the underlying persistence engine..
    public static String CommittingAttempt() {
        //return ResourceManager.getString("CommittingAttempt", resourceCulture);
        return "Committing attempt '{0}' which contains {1} events to the underlying persistence engine.";
    }

    // Converting an Event from '{0}' to '{1}'..
    public static String ConvertingEvent() {
        //return ResourceManager.getString("ConvertingEvent", resourceCulture);
        return "Converting an Event from '{0}' to '{1}'.";
    }

    // Creating stream '{0}'..
    public static String CreatingStream() {
        //return ResourceManager.getString("CreatingStream", resourceCulture);
        return "Creating stream '{0}'.";
    }

    // Dispatching message to /dev/null..
    public static String DispatchingToDevNull() {
        //return ResourceManager.getString("DispatchingToDevNull", resourceCulture);
        return "Dispatching message to /dev/null.";
    }

    // Disposing engine..
    public static String DisposingEngine() {
        //return ResourceManager.getString("DisposingEngine", resourceCulture);
        return "Disposing engine.";
    }

    // Getting all commits for stream '{0}' between '{1}' and '{2}'..
    public static String GettingAllCommitsFromRevision() {
        //return ResourceManager.getString("GettingAllCommitsFromRevision", resourceCulture);
        return "Getting all commits for stream '{0}' between '{1}' and '{2}'.";
    }

    // Getting all commits from '{0}' forward..
    public static String GettingAllCommitsFromTime() {
        //return ResourceManager.getString("GettingAllCommitsFromTime", resourceCulture);
        return "Getting all commits from '{0}' forward.";
    }

    // Getting the most recent snapshot for stream '{0}' on/since revision '{1}'..
    public static String GettingSnapshotForStream() {
        //return ResourceManager.getString("GettingSnapshotForStream", resourceCulture);
        return "Getting the most recent snapshot for stream '{0}' on/since revision '{1}'.";
    }

    // Getting the set of all streams to be snapshot which exceed {0} revisions without a snapshot..
    public static String GettingStreamsToSnapshot() {
        //return ResourceManager.getString("GettingStreamsToSnapshot", resourceCulture);
        return "Getting the set of all streams to be snapshot which exceed {0} revisions without a snapshot.";
    }

    // Getting undispatched commits from persistence engine..
    public static String GettingUndispatchedCommits() {
        //return ResourceManager.getString("GettingUndispatchedCommits", resourceCulture);
        return "Getting undispatched commits from persistence engine.";
    }

    // Ignoring some events on commit '{0}' of stream '{1}' because they starting before revision {2}..
    public static String IgnoringBeforeRevision() {
        //return ResourceManager.getString("IgnoringBeforeRevision", resourceCulture);
        return "Ignoring some events on commit '{0}' of stream '{1}' because they starting before revision {2}.";
    }

    // Ignoring some events on commit '{0}' of stream '{1}' because they go beyond revision {2}..
    public static String IgnoringBeyondRevision() {
        //return ResourceManager.getString("IgnoringBeyondRevision", resourceCulture);
        return "Ignoring some events on commit '{0}' of stream '{1}' because they go beyond revision {2}.";
    }

    // Initializing engine..
    public static String InitializingEngine() {
        //return ResourceManager.getString("InitializingEngine", resourceCulture);
        return "Initializing engine.";
    }

    // Initializing persistence engine..
    public static String InitializingPersistence() {
        //return ResourceManager.getString("InitializingPersistence", resourceCulture);
        return "Initializing persistence engine.";
    }

    // Pushing commit '{0}' to post-commit hook of type '{1}'..
    public static String InvokingPostCommitPipelineHooks() {
        //return ResourceManager.getString("InvokingPostCommitPipelineHooks", resourceCulture);
        return "Pushing commit '{0}' to post-commit hook of type '{1}'.";
    }

    // Pushing commit '{0}' to pre-commit hook of type '{1}'..
    public static String InvokingPreCommitHooks() {
        //return ResourceManager.getString("InvokingPreCommitHooks", resourceCulture);
        return "Pushing commit '{0}' to pre-commit hook of type '{1}'.";
    }

    // Marking commit '{0}' as dispatched..
    public static String MarkingAsDispatched() {
        //return ResourceManager.getString("MarkingAsDispatched", resourceCulture);
        return "Marking commit '{0}' as dispatched.";
    }

    // Marking commit '{0}' as dispatched..
    public static String MarkingCommitAsDispatched() {
        //return ResourceManager.getString("MarkingCommitAsDispatched", resourceCulture);
        return "Marking commit '{0}' as dispatched.";
    }

    // There are no outstanding changes to be committed stream '{0}'..
    public static String NoChangesToCommit() {
        //return ResourceManager.getString("NoChangesToCommit", resourceCulture);
        return "There are no outstanding changes to be committed stream '{0}'.";
    }

    // No other commits have been discovered that conflict for stream '{0}'..
    public static String NoConflicts() {
        //return ResourceManager.getString("NoConflicts", resourceCulture);
        return "No other commits have been discovered that conflict for stream '{0}'.";
    }

    // Purging all commits on stream '{0}' from tracking..
    public static String NoLongerTrackingStream() {
        //return ResourceManager.getString("NoLongerTrackingStream", resourceCulture);
        return "Purging all commits on stream '{0}' from tracking.";
    }

    // The stream revision must be a positive number..
    public static String NonPositiveRevisionNumber() {
        //return ResourceManager.getString("NonPositiveRevisionNumber", resourceCulture);
        return "The stream revision must be a positive number.";
    }

    // The commit sequence must be a positive number..
    public static String NonPositiveSequenceNumber() {
        //return ResourceManager.getString("NonPositiveSequenceNumber", resourceCulture);
        return "The commit sequence must be a positive number.";
    }

    // Opening stream '{0}' between revisions {1} and {2}..
    public static String OpeningStreamAtRevision() {
        //return ResourceManager.getString("OpeningStreamAtRevision", resourceCulture);
        return "Opening stream '{0}' between revisions {1} and {2}.";
    }

    // Opening stream '{0}' with snapshot at {1} up to revision {2}..
    public static String OpeningStreamWithSnapshot() {
        //return ResourceManager.getString("OpeningStreamWithSnapshot", resourceCulture);
        return "Opening stream '{0}' with snapshot at {1} up to revision {2}.";
    }

    // Verifying that no other commits have succeed on the stream '{0}'..
    public static String OptimisticConcurrencyCheck() {
        //return ResourceManager.getString("OptimisticConcurrencyCheck", resourceCulture);
        return "Verifying that no other commits have succeed on the stream '{0}'.";
    }

    // Pushing attempt '{0}' on stream '{1}' to the underlying store..
    public static String PersistingCommit() {
        //return ResourceManager.getString("PersistingCommit", resourceCulture);
        return "Pushing attempt '{0}' on stream '{1}' to the underlying store.";
    }

    // One or more pipeline hooks filtered out the commit..
    public static String PipelineHookFilteredCommit() {
        //return ResourceManager.getString("PipelineHookFilteredCommit", resourceCulture);
        return "One or more pipeline hooks filtered out the commit.";
    }

    // Pipeline hook of type '{0}' skipped over commit '{1}'..
    public static String PipelineHookSkippedCommit() {
        //return ResourceManager.getString("PipelineHookSkippedCommit", resourceCulture);
        return "Pipeline hook of type '{0}' skipped over commit '{1}'.";
    }

    // Purging all data from storage..
    public static String PurgingStore() {
        //return ResourceManager.getString("PurgingStore", resourceCulture);
        return "Purging all data from storage.";
    }

    // The collection is read only and cannot be modified..
    public static String ReadOnlyCollection() {
        //return ResourceManager.getString("ReadOnlyCollection", resourceCulture);
        return "The collection is read only and cannot be modified.";
    }

    // Retrieving all {0} undispatched commits..
    public static String RetrievingUndispatchedCommits() {
        //return ResourceManager.getString("RetrievingUndispatchedCommits", resourceCulture);
        return "Retrieving all {0} undispatched commits.";
    }

    // The stream revision must always be greater than or equal to the commit sequence..
    public static String RevisionTooSmall() {
        //return ResourceManager.getString("RevisionTooSmall", resourceCulture);
        return "The stream revision must always be greater than or equal to the commit sequence.";
    }

    // Scheduling commit '{0}' for delivery..
    public static String SchedulingDelivery() {
        //return ResourceManager.getString("SchedulingDelivery", resourceCulture);
        return "Scheduling commit '{0}' for delivery.";
    }

    // Scheduling commit '{0}' to be dispatched..
    public static String SchedulingDispatch() {
        //return ResourceManager.getString("SchedulingDispatch", resourceCulture);
        return "Scheduling commit '{0}' to be dispatched.";
    }

    // Shutting down dispatcher..
    public static String ShuttingDownDispatcher() {
        //return ResourceManager.getString("ShuttingDownDispatcher", resourceCulture);
        return "Shutting down dispatcher.";
    }

    // Shutting down dispatch scheduler..
    public static String ShuttingDownDispatchScheduler() {
        //return ResourceManager.getString("ShuttingDownDispatchScheduler", resourceCulture);
        return "Shutting down dispatch scheduler.";
    }

    // Shutting down event store..
    public static String ShuttingDownStore() {
        //return ResourceManager.getString("ShuttingDownStore", resourceCulture);
        return "Shutting down event store.";
    }

    // Starting dispatch scheduler..
    public static String StartingDispatchScheduler() {
        //return ResourceManager.getString("StartingDispatchScheduler", resourceCulture);
        return "Starting dispatch scheduler.";
    }

    // Tracking commit {0} on stream '{1}'..
    public static String TrackingCommit() {
        //return ResourceManager.getString("TrackingCommit", resourceCulture);
        return "Tracking commit {0} on stream '{1}'.";
    }

    // Tracking up to {0} streams..
    public static String TrackingStreams() {
        //return ResourceManager.getString("TrackingStreams", resourceCulture);
        return "Tracking up to {0} streams.";
    }

    // Configured dispatcher of type '{0}' was unable to dispatch commit '{1}'..
    public static String UnableToDispatch() {
        //return ResourceManager.getString("UnableToDispatch", resourceCulture);
        return "Configured dispatcher of type '{0}' was unable to dispatch commit '{1}'.";
    }

    // Unable to mark commit '{0}' as dispatched, the underlying storage has already been disposed.
    public static String UnableToMarkDispatched() {
        //return ResourceManager.getString("UnableToMarkDispatched", resourceCulture);
        return "Unable to mark commit '{0}' as dispatched, the underlying storage has already been disposed";
    }

    // The underlying stream '{0}' has changed since the last known commit, refreshing the stream..
    public static String UnderlyingStreamHasChanged() {
        //return ResourceManager.getString("UnderlyingStreamHasChanged", resourceCulture);
        return "The underlying stream '{0}' has changed since the last known commit, refreshing the stream.";
    }

    // Updating stream head for stream '{0}'..
    public static String UpdatingStreamHead() {
        //return ResourceManager.getString("UpdatingStreamHead", resourceCulture);
        return "Updating stream head for stream '{0}'.";
    }
}
